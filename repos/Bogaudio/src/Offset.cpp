
#include "Offset.hpp"

void Offset::step() {
	float offset = knobValue(params[OFFSET_PARAM], inputs[OFFSET_INPUT]);
	float scale = knobValue(params[SCALE_PARAM], inputs[SCALE_INPUT]);
	scale = scale < 0.0 ? -pow(scale, 2.0) : pow(scale, 2.0);
	scale *= 10.0;
	if (inputs[IN_INPUT].active) {
		outputs[OUT_OUTPUT].value = clamp((inputs[IN_INPUT].value + 10.0f * offset) * scale, -10.0f, 10.0f);
	}
	else {
		outputs[OUT_OUTPUT].value = clamp(10.0f * offset * scale, -10.0f, 10.0f);
	}
}

float Offset::knobValue(const Param& knob, const Input& cv) const {
	float v = knob.value;
	if (cv.active) {
		v *= clamp(cv.value / 10.0f, -1.0f, 1.0f);
	}
	return v;
}

struct OffsetWidget : ModuleWidget {
	OffsetWidget(Offset* module) : ModuleWidget(module) {
		box.size = Vec(RACK_GRID_WIDTH * 3, RACK_GRID_HEIGHT);

		{
			SVGPanel *panel = new SVGPanel();
			panel->box.size = box.size;
			panel->setBackground(SVG::load(assetPlugin(plugin, "res/Offset.svg")));
			addChild(panel);
		}

		addChild(Widget::create<ScrewSilver>(Vec(0, 0)));
		addChild(Widget::create<ScrewSilver>(Vec(box.size.x - 15, 365)));

		float knobNudge = 0.4;
		// generated by svg_widgets.rb
		auto offsetParamPosition = Vec(7.5 + knobNudge, 39.5 + knobNudge);
		auto scaleParamPosition = Vec(7.5 + knobNudge, 151.5 + knobNudge);

		auto offsetInputPosition = Vec(10.5, 81.0);
		auto scaleInputPosition = Vec(10.5, 193.0);
		auto inInputPosition = Vec(10.5, 243.0);

		auto outOutputPosition = Vec(10.5, 281.0);
		// end generated by svg_widgets.rb

		addParam(ParamWidget::create<Knob29>(offsetParamPosition, module, Offset::OFFSET_PARAM, -1.0, 1.0, 0.0));
		addParam(ParamWidget::create<Knob29>(scaleParamPosition, module, Offset::SCALE_PARAM, -1.0, 1.0, 0.316));

		addInput(Port::create<Port24>(offsetInputPosition, Port::INPUT, module, Offset::OFFSET_INPUT));
		addInput(Port::create<Port24>(scaleInputPosition, Port::INPUT, module, Offset::SCALE_INPUT));
		addInput(Port::create<Port24>(inInputPosition, Port::INPUT, module, Offset::IN_INPUT));

		addOutput(Port::create<Port24>(outOutputPosition, Port::OUTPUT, module, Offset::OUT_OUTPUT));
	}
};

Model* modelOffset = Model::create<Offset, OffsetWidget>("Bogaudio", "Bogaudio-Offset", "Offset", ATTENUATOR_TAG, UTILITY_TAG);
