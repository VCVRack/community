plugin ideas:
- Mult with labels
  - so I can route a distance output to mult and label
    it as 'main seq gate output' to avoid tracing cables
- seq with start/stop/reset triggers (ie, one shot sequencer)
  (or 'play', 'pause', 'go to begin')
  - solve 'how do I run a sequence once?' FAQ
- event log
  - visualization of past triggers/gates
  - time series or sparkline-ish
  - more or less a scope but without y values and
    a very long time
  - could do diff colors for gates/triggers
    - or gates up and triggers down
  - wide module
  - multiple time view zooms
    - 1x, 2x, 5x, 10, 20x, 50x, etc
  - mostly for appearance or troubleshooting/debugging event stuff
  - could evolve to supporting playing the the history back
    - 1x speed or faster/slower
    - scrubbing?
  - multiple channels of events
- table module
  - "an oscillator is a phasor and a table"
  - phasor input  (0.0 -> 1.0) or other scaled
  - value output
  - on step, read phasor value, look for a match
    in the table, output the value
  - ui
    - just a scrollable list?
    - columns
        - phasor
            - start range
            - end range
        - output value
    - buttons to add delete entry
  - load table from json in context menu
  - uses:
    - feed a sawtooth osc output into it to
      create rudimentary wave table
    - arbitrary quantizer
    - building block
  - fancy options
    - entries that map a range of phasor input
      values to a range of output values
      - map ranges could be linear/log etc
        - linear
            - slope
            - offset
        - sub ranges could be cos/sine/exp/some distribution etc
    - (similar to the old GIMP color gradient editor)
        - likely could use gimp gradient (ggr) files as a type of table
    - modulating the table offset or value amplitudes
- credits module
  - widget that shows author, create/mod date, urls, license, other metainfo
  - would save into vcv file as module json data
  - use a rack_credits.json in ~/ or rack doc root to set the default
  - list of author/credit metadata
    - would get appended to if modified by new author
  - how to only update on 'save' or 'save as' ?
    - don't want to append on every autosave.vcv write
    - track a single 'last_edit' to persist on every toJson
      - then on load/fromJSON, add last_edit to author list
    - if there is a way for plugin to distinquish a 'real save' vs
      an 'autosave', then could use that.
   - how to tell when a patch has been 'modified'?
     - needed to avoid adding info on every save or autosave
     - slightly klugey way:
        - if plugin knows the patch it is in, could load patch .vcv/json
          data and compare to 'previous'.
          - chksum would be simplest
          - but could do a smarter/deeper compare diving into the data
   - uses:
     - a patch with the module includes the author info
     - if patch is shared (via patchstorage for ex), and modified
       by a different author, the module json would include info
       for the original author and modification author
     - just as a display widget when sharing a screen capture
   - concerns:
    - could probably be better implemented as a feature of the core vcv serialization
- 'Equal and opposite'
  - two eqs with 'opposite' settings and an effects loop in between
  - before eq, after eq
    - same bands and q's, but opposite gain
        - ie, if 'before eq' boosts bass and treble by 10db and cuts mids by 12db
          then the 'after eq' would cut bass and treble by 10db and boost mids by 12db
  - an effects send and return in between
    - munge audio signal, send it to effect (a distortion for ex) and unmunge on the way out
  - the before/after transforms would automatically mirror each other
    - otherwise pointless since it could be done with other modules
  - other variations could exist for other reversible-ish transforms
    - dont have to be perfect or lossless
    - compress/expand
    - bitcrush /  'bit extropalate' (is that a thing?)
    - forward/reverse delay?
    - pitch shift (probably most interesting, but
- transport gui module
  - play/stop/pause/fast forward/reverse/record buttons
  - gate and trig outputs for them
  - just buttons, but with a explicit purpose
  - uses
    - generative patches that need a 'press play to start'
- specific values
  - module with just text entrie fields for entering a float value
    and an output for that value
  - possibly with text widget in combo with a dial or inc/dec
    buttons (spinbox widget)
    - or 'click and drag to change value'
      - up/down for small value
      - left/right for multiplier (middle = 1x, left = 0..1.0x, right >1.0x multi)
      - 'up and to the left' for fine grained adjustments
  - fancy
    - maybe automatically also show CV v/oct freq or note equiv
  - maybe gate out and button to click to send value and gate output together

